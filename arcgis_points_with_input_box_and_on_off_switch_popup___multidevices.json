{
  "alias": "arcgis_points_with_input_box_popup_multidevices",
  "name": "ArcGIS Points with Input Box and On-Off switch Popup - MultiDevices",
  "descriptor": {
    "type": "latest",
    "sizeX": 12,
    "sizeY": 9,
    "resources": [
      {
        "url": "https://js.arcgis.com/4.11/init.js"
      }
    ],
    "templateHtml": "<link rel=\"stylesheet\" href=\"https://js.arcgis.com/4.11/esri/themes/light/main.css\"/>\n<!--<script src=\"https://js.arcgis.com/4.11/\"></script>\n<script src=\"https://requirejs.org/docs/release/2.3.5/minified/require.js\"></script> -->\n\n<div id=\"viewDiv\"></div>",
    "templateCss": "\n\nhtml, body, #viewDiv{\n    height: 100%; width: 100%; margin:0; padding: 0;\n}\n\n.onoffswitch {\n    position: relative; width: 60px;\n    -webkit-user-select:none; -moz-user-select:none; -ms-user-select: none;\n}\n.onoffswitch-checkbox {\n    display: none;\n}\n.onoffswitch-label {\n    display: block; overflow: hidden; cursor: pointer;\n    border: 2px solid #999999; border-radius: 0px;\n}\n.onoffswitch-inner {\n    display: block; width: 200%; margin-left: -100%;\n    transition: margin 0.3s ease-in 0s;\n}\n.onoffswitch-inner:before, .onoffswitch-inner:after {\n    display: block; float: left; width: 50%; height: 20px; padding: 0; line-height: 16px;\n    font-size: 12px; color: white; font-family: Trebuchet, Arial, sans-serif; font-weight: bold;\n    box-sizing: border-box;\n    border: 2px solid transparent;\n    background-clip: padding-box;\n}\n.onoffswitch-inner:before {\n    content: \"ON\";\n    padding-left: 10px;\n    background-color: #EEEEEE; color: #E7864A;\n}\n.onoffswitch-inner:after {\n    content: \"OFF\";\n    padding-right: 10px;\n    background-color: #EEEEEE; color: #999999;\n    text-align: right;\n}\n.onoffswitch-switch {\n    display: block; width: 18px; margin: 0px;\n    background: #999999;\n    position: absolute; top: 0; bottom: 0;\n    right: 42px;\n    transition: all 0.3s ease-in 0s; \n}\n.onoffswitch-checkbox:checked + .onoffswitch-label .onoffswitch-inner {\n    margin-left: 0;\n}\n.onoffswitch-checkbox:checked + .onoffswitch-label .onoffswitch-switch {\n    right: 0px; \n    background-color: #305DAB; \n}",
    "controllerScript": "self.onInit = function() {\n    \n    \n    $scope = self.ctx.$scope;\n    self.ctx.$scope.data = self.ctx.defaultSubscription.data;\n    attributeService = $scope.$injector.get('attributeService');\n    toast = $scope.$injector.get('toast');\n    utils = $scope.$injector.get('utils');\n    types = $scope.$injector.get('types');\n    settings = angular.copy(self.ctx.settings) || {};\n    $scope.settings = settings;\n    $scope.LocationValue = \"\";\n    $scope.StreetValue = \"\";\n    $scope.EnableValue = \"\";\n    $scope.longitudeValue = \"\";\n    $scope.latitudeValue = \"\";\n    $scope.SpeeLimitValue = \"\";\n    \n    $scope.longitudeValue = [];\n    $scope.LocationValue =  [];\n    $scope.StreetValue = [];\n    $scope.EnableValue = [];\n    $scope.latitudeValue = [];\n    $scope.SpeeLimitValue = [];\n    $scope.DeviceUndefined = [];\n    \n    \n    var data = self.ctx.$scope.data;\n    \n    //console.log (data);\n    //Attaching Datakey labels to Map variables\n    $scope.Location = data[0].dataKey.label;\n    $scope.Street = data[1].dataKey.label;\n    $scope.Enable = data[2].dataKey.label;\n    $scope.longitude = data[3].dataKey.label;\n    $scope.latitude = data[4].dataKey.label;\n    $scope.SpeeLimit = data[5].dataKey.label;\n    \n\n    \n    console.log(self.ctx.$scope.data);\n    console.log(self.ctx.datasources);\n    //console.log($scope.SpeeLimitValue);\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    self.onResize();\n};\n\nself.onDataUpdated = function() {\n    \n    \n    \n    var data = self.ctx.$scope.data;\n    //console.log(\"Data: \" + data[j+0].data[0][1]);\n    console.log(\"Data: \" + data[1].data);\n    for(let i=0,j=0;i<self.ctx.datasources.length;i++,j+=6)\n        {\n            $scope.LocationValue[i] = data[j+0].data[0][1];\n            $scope.StreetValue[i] = data[j+1].data[0][1]; \n            $scope.EnableValue[i] = data[j+2].data[0][1];\n            $scope.longitudeValue[i] = data[j+3].data[0][1];\n            $scope.latitudeValue[i] = data[j+4].data[0][1];\n            $scope.SpeeLimitValue[i] = data[j+5].data[0][1];\n        }    \n    \n    \n    \n    \n    \n    \n    \n\n    \n    \n    \n    require([\"esri/Map\",\n             \"esri/WebMap\",\n             \"esri/layers/CSVLayer\",\n             \"esri/views/MapView\",\n             \"esri/layers/TileLayer\",\n             \"esri/widgets/Legend\",\n             \"esri/widgets/Expand\",\n             \"esri/Graphic\"\n             ], function(Map, WebMap, CSVLayer, MapView, TileLayer, Legend, Expand, Graphic) {\n                \n                 \n                var darblayer = new TileLayer({\n                    url: \"https://www.darb.ae/arcgis/rest/services/BaseMaps/DOT_StreetMap_En/MapServer\"\n                  });\n                 \n                var map = new Map({\n                    basemap : \"\",\n                    layers : [darblayer]\n                });\n        \n                var view = new MapView({\n                  container: \"viewDiv\",\n                  map: map, \n                  zoom: 1, \n                  center: [54.98, 24.59],\n                  popup: {\n                    actions: [],\n                    dockEnabled: true,\n                    dockOptions: {\n                      buttonEnabled: true,\n                      breakpoint: false\n                    }\n                  }\n                });\n                \n                \n                \n                for (let i=0;i<self.ctx.datasources.length;i++)\n                {\n                \n                    var point = {\n                        type: \"point\",\n                        longitude: $scope.longitudeValue[i],\n                        latitude: $scope.latitudeValue[i]\n                      };\n                \n                      var simpleMarkerSymbol = {\n                        type: \"simple-marker\",\n                        color: [226, 119, 40],  // orange\n                        outline: {\n                          color: [255, 255, 255], // white\n                          width: 1\n                        }\n                      };\n                      \n                      var attributes = {\n                        Place: $scope.LocationValue[i],\n                        Street: $scope.StreetValue[i],\n                        Enable: $scope.EnableValue[i],\n                        Latitude: $scope.latitudeValue[i],\n                        Longitude: $scope.longitudeValue[i],\n                        SpeeLimit: $scope.SpeeLimitValue[i],\n                        speedValueId: (i+1)*6 - 1,     //For finding speedlimit's Id: buttons\n                        enableId: (i+1)*6 - 4\n                      };\n                      var checkBoxChecked = ($scope.EnableValue[i]=='true')?'checked':' ';\n                      var popupTemplate = {\n                        title: \"{Place}\",\n                        content: [\n                          {\n                            type: \"text\",\n                            text:\n                              \"at {Street} Street. <br/><div style='float:left;'><input type='Number' id='NewSpeedLimit' name='NewSpeedLimit'  placeholder='{SpeeLimit}' min='19' max='199'/> <input type='button' value='Update' name='Update' onclick='updateAttribute({speedValueId})' id='UpdateSpeeed{id}' class='btn btn-link'></div><div style='float:right;'><div class='onoffswitch'><input type='checkbox' name='onoffswitch' class='onoffswitch-checkbox' id='EnableCheck{enableId}'  onclick='SendPowerStatus({enableId});' \" +checkBoxChecked+\"><label class='onoffswitch-label' for='EnableCheck{enableId}'><span class='onoffswitch-inner'></span><span class='onoffswitch-switch'></span></label></div></div>\"\n                          },\n                          {\n                            type: \"fields\",\n                            fieldInfos: [\n                              {\n                                fieldName: \"Enable\",\n                                label: $scope.Enable,\n                              },\n                              {\n                                fieldName: \"Latitude\",\n                                label: $scope.latitude,\n                              },\n                              {\n                                fieldName: \"Longitude\",\n                                label: $scope.longitude,\n                              },\n                              {\n                                fieldName: \"SpeeLimit\",\n                                label: $scope.SpeeLimit\n                              }\n                            ]\n                          }\n                        ]\n                      };\n                      \n                      function PopupContent(attributes){\n                          \n                          return (\"at {Street} Street. <br/><input type='text' id='NewSpeedLimit' name='NewSpeedLimit'  placeholder='New Speed Limit'/> <input type='button' value='Update' name='Update' onclick='updateAttribute({speedValueId})' id='UpdateSpeeed{id}'/> <br/>   <div class='onoffswitch'><input type='checkbox' name='onoffswitch' class='onoffswitch-checkbox' id='EnableCheck{enableId}'\"+ EnableValue[i]?'checked':''+\" onclick='SendPowerStatus({enableId});'><label class='onoffswitch-label' for='EnableCheck{enableId}'><span class='onoffswitch-inner'></span><span class='onoffswitch-switch'></span></label></div>\");\n                          \n                      }\n                \n                      var pointGraphic = new Graphic({\n                        geometry: point,\n                        symbol: simpleMarkerSymbol,\n                        attributes: attributes,\n                        popupTemplate: popupTemplate\n                      });\n                \n                      view.graphics.add(pointGraphic);\n\n                \n                }\n        \n        \n      });\n      \n      \n      \n    UpdateButtonStatus = function (enableId)\n    {\n        var checkBoxNum = 'EnableCheck'+enableId;//((i+1)*6 - 4).toString();\n        var checkbox = document.getElementById(checkBoxNum);\n        console.log($scope.EnableValue[i] + checkBoxNum);\n        console.log(checkbox);\n        console.log(($scope.EnableValue[i]=='true'));\n        if (checkbox)\n            checkbox.checked = ($scope.EnableValue[i]=='true');\n    };\n    \n    \n     \n    updateAttribute = function (speedValueId) {\n        \n        var i = speedValueId;    // Updated speedLimits's Id\n        var NewSpeedLimit = document.getElementById('NewSpeedLimit').value;\n        console.log(i + \" \" + NewSpeedLimit);\n\n                var datasource = self.ctx.data[i].datasource;\n                var datakey = self.ctx.data[i].dataKey;\n                //console.log(\"datasourceId: \"+datasource.entity.id.id);\n                //console.log(\"datasourceType: \"+datasource.entity.id.entityType);\n                //console.log(types.attributesScope.shared.value);\n                //console.log(datakey.name);\n                attributeService.saveEntityAttributes(\n                    datasource.entity.id.entityType,\n                    datasource.entity.id.id,\n                    types.attributesScope.shared.value,\n                    [\n                        {\n                            key: datakey.name,\n                            value: NewSpeedLimit\n                        }\n                    ]\n                ).then(\n                    function success() {\n                        $scope.originalValue = $scope.currentValue;\n                        if (settings.showResultMessage) {\n                            toast.showSuccess('Update successful', 1000, angular.element(self.ctx.$container), 'bottom left');\n                        }\n                    },\n                    function fail() {\n                        if (settings.showResultMessage) {\n                            toast.showError('Update failed', angular.element(self.ctx.$container), 'bottom left');\n                        }\n                    }\n                );\n                \n\n    };\n    \n    \n    SendPowerStatus = function (enableId) {\n            var input = document.getElementById (\"EnableCheck\"+enableId.toString());\n            var i = enableId;    // Updated EnableCheckBox's Id\n            var deviceNo = (enableId +4)/6 -1;\n            console.log(deviceNo);\n            var isChecked = ($scope.EnableValue[deviceNo]=='true');//input.checked;\n            console.log (\"The checkBox is \" + !isChecked + \" \" + \"EnableCheck\"+enableId);\n            var datasource = self.ctx.data[i].datasource;\n                var datakey = self.ctx.data[i].dataKey;\n                //console.log(\"datasourceId: \"+datasource.entity.id.id);\n                //console.log(\"datasourceType: \"+datasource.entity.id.entityType);\n                //console.log(types.attributesScope.shared.value);\n                //console.log(datakey.name);\n                attributeService.saveEntityAttributes(\n                    datasource.entity.id.entityType,\n                    datasource.entity.id.id,\n                    types.attributesScope.shared.value,\n                    [\n                        {\n                            key: datakey.name,\n                            value: !(isChecked)\n                        }\n                    ]\n                ).then(\n                    function success() {\n                        $scope.originalValue = $scope.currentValue;\n                        if (settings.showResultMessage) {\n                            toast.showSuccess('Update successful', 1000, angular.element(self.ctx.$container), 'bottom left');\n                        }\n                    },\n                    function fail() {\n                        if (settings.showResultMessage) {\n                            toast.showError('Update failed', angular.element(self.ctx.$container), 'bottom left');\n                        }\n                    }\n                );\n        };\n    \n    \n    \n    \n}\n\nself.onResize = function() {\n    \n}\n\nself.onDestroy = function() {\n}\n",
    "settingsSchema": "{}",
    "dataKeySettingsSchema": "{}\n",
    "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"value = 100;\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#4caf50\",\"settings\":{},\"_hash\":0.49925287215985814,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin 2\",\"color\":\"#f44336\",\"settings\":{},\"_hash\":0.7813435619832683,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin 3\",\"color\":\"#ffc107\",\"settings\":{},\"_hash\":0.7784017848537541,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin 4\",\"color\":\"#607d8b\",\"settings\":{},\"_hash\":0.14870526330739553,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin 5\",\"color\":\"#9c27b0\",\"settings\":{},\"_hash\":0.5342983499057024,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"ArcGIS Points with Input Box and On-Off switch Popup - MultiDevices\",\"dropShadow\":true,\"enableFullscreen\":true,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
  }
}